# Accept build-time arguments for user/group IDs
ARG PUID=1000
ARG PGID=1000
ARG UNAME=pie
# --- Stage 1: The Builder ---
FROM debian:bullseye as builder

# Set environment variables to prevent prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm

RUN echo "Name " $UNAME
RUN echo $PUID

# Create a non-root user and group with the provided IDs and name for the build process
RUN groupadd -g ${PGID} ${UNAME} && \
    useradd -u ${PUID} -g ${PGID} -m -s /bin/bash ${UNAME} && \
    echo "${UNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${UNAME}

# Install all build-time dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        cmake \
        curl \
        git \
        gnupg \
        libasound2-dev \
        libbluetooth-dev \
        libdbus-1-dev \
        libevdev-dev \
        libsdl2-dev \
        libsdl2-image-dev \
        libsdl2-mixer-dev \
        libudev-dev \
        lsb-release \
        pkg-config \
        python3-dev \
        sudo \
        subversion \
        wget && \
    rm -rf /var/lib/apt/lists/*

# Switch to the non-root user
USER ${UNAME}
WORKDIR /home/${UNAME}

# Clone the RetroPie-Setup repository and run the installation
RUN git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git
WORKDIR /home/${UNAME}/RetroPie-Setup
RUN sudo ./retropie_packages.sh setup basic_install

# --- Stage 2: The Final Image ---
# This stage creates the slim, final container
FROM debian:bullseye-slim

# Set environment variables again for the final image
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm

# Set the stop signal to allow for a clean shutdown
STOPSIGNAL SIGINT

# Accept the same arguments again for the final stage, with defaults
ARG UNAME=pie
ARG PUID=1000
ARG PGID=1000

# Install only the essential runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        bluetooth \
        bluez \
        dbus-daemon \
        feh \
        iproute2 \
        joystick \
        p7zip \
        python3-pyudev \
        sudo \
        tini \
        unzip \
        xdg-utils \
        xmlstarlet && \
    rm -rf /var/lib/apt/lists/*

# Create the same non-root user and group as in the builder
RUN groupadd -g ${PGID} ${UNAME} && \
    useradd -u ${PUID} -g ${PGID} -m -s /bin/bash ${UNAME} && \
    usermod -a -G adm,audio,sudo,users,video,input,plugdev,bluetooth ${UNAME}

# Copy the installed RetroPie files from the builder stage
COPY --from=builder /home/${UNAME} /home/${UNAME}
COPY --from=builder /opt/retropie /opt/retropie

# Create a backup of the default configurations generated by the setup script.
# This backup will be used by the entrypoint to populate the empty volume on first run.
RUN chown -R ${UNAME}:${UNAME} /opt/retropie/configs
RUN cp -a /opt/retropie/configs /opt/retropie/configs.bak

# Copy the entrypoint script into the container and make it executable.
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint to our custom script.
# ENTRYPOINT ["/usr/bin/tini", "--", "/home/pie/entrypoint.sh"]
ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]
